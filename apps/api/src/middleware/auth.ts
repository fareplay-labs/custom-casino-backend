import { FastifyRequest, FastifyReply } from 'fastify';
import { verifySignature, validateSignatureTimestamp } from '@fareplay/solana';
import { getPrismaClient } from '@fareplay/db';
import { createLogger } from '@fareplay/utils';

const logger = createLogger('api:auth');

export interface AuthenticatedRequest extends FastifyRequest {
  user: {
    walletAddress: string;
    playerId: string;
  };
}

/**
 * Middleware to verify JWT tokens
 */
export async function authenticate(
  request: FastifyRequest,
  reply: FastifyReply
): Promise<void> {
  try {
    await request.jwtVerify();
  } catch (error) {
    logger.warn({ error }, 'Authentication failed');
    reply.code(401).send({ error: 'Unauthorized' });
  }
}

/**
 * Authenticates a user with a Solana wallet signature
 * Requires casinoSlug to associate player with casino
 */
export async function authenticateWithSignature(
  walletAddress: string,
  message: string,
  signature: string,
  casinoSlug: string
): Promise<{ token: string; player: any; casino: any } | null> {
  try {
    // Verify the signature
    const isValid = verifySignature({
      message,
      signature,
      publicKey: walletAddress,
    });

    if (!isValid) {
      logger.warn({ walletAddress }, 'Invalid signature');
      return null;
    }

    // Validate timestamp
    const isTimestampValid = validateSignatureTimestamp(message);
    if (!isTimestampValid) {
      logger.warn({ walletAddress }, 'Invalid or expired timestamp');
      return null;
    }

    // Get casino
    const db = getPrismaClient();
    const casino = await db.casino.findUnique({
      where: { slug: casinoSlug },
    });

    if (!casino) {
      logger.warn({ casinoSlug }, 'Casino not found');
      return null;
    }

    // Get or create player (scoped to casino)
    let player = await db.player.findUnique({
      where: {
        casinoId_walletAddress: {
          casinoId: casino.id,
          walletAddress,
        },
      },
    });

    if (!player) {
      player = await db.player.create({
        data: {
          casinoId: casino.id,
          walletAddress,
        },
      });
      logger.info({ walletAddress, casinoId: casino.id }, 'New player created');
    } else {
      // Update last seen
      await db.player.update({
        where: { id: player.id },
        data: { lastSeenAt: new Date() },
      });
    }

    return {
      token: '', // Will be generated by the route handler
      player,
      casino,
    };

  } catch (error) {
    logger.error({ error, walletAddress }, 'Error authenticating with signature');
    return null;
  }
}

